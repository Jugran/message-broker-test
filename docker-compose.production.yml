services:
  api: &api
    container_name: api
    image: scale-test-api
    init: true
    tty: true
    stdin_open: true

    restart: always
    
    build: .

    depends_on:
      - mongo
      - rabbitmq

    env_file:
      - ./.env

    volumes:
      - ./api:/home/node/code

    networks:
      - api-mongo
      - api-rabbit
      
    # entrypoint: "/home/node/code/node_modules/.bin/nodemon server.js"
    entrypoint: "pm2-runtime server.js -i 1 --watch"

  queue: 
    <<: *api
    container_name: queue-api

    depends_on:
      - api
      - rabbitmq
    
    volumes:
      - ./queue-api:/home/node/code

    networks:
      - rabbit-queue
      - app-network

    # entrypoint: "/home/node/code/node_modules/.bin/nodemon server.js"
    # entrypoint: "pm2-runtime server.js -i 1 --watch"

  mongo:
    container_name: mongo
    restart: always
    image: mongo:4.2.0 

    volumes:
      - ./data:/data/db
      - ./scripts:/docker-entrypoint-initdb.d

    networks:
      - api-mongo
        
    # # command: ["--replSet", "rs0"]
    command: [ "--bind_ip_all", "--replSet", "rs0" ]

    # deploy:
    #   resources:
    #       limits:
    #         cpus: 0.20
    #         memory: 256M
    #       reservations:
    #         cpus: 0.15
    #         memory: 128M
    
  rabbitmq:
    container_name: rabbitmq
    restart: always
    image: rabbitmq:3.9.12-management-alpine

    ports:
      - 15672:15672
    
    networks:
      - rabbit-queue
      - api-rabbit

  webserver:
    image: nginx:mainline-alpine
    container_name: webserver
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./web-root:/var/www/html
      - ./nginx:/etc/nginx/conf.d
      - ./certbot/etc:/etc/letsencrypt
      - ./certbot/var:/var/lib/letsencrypt
      - ./dhparam:/etc/ssl/certs

    depends_on:
      - queue
    networks:
      - app-network

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/etc:/etc/letsencrypt
      - ./certbot/var:/var/lib/letsencrypt
      - ./web-root:/var/www/html  
    depends_on:
      - webserver
    command: certonly --webroot --webroot-path=/var/www/html --email email@email.com --agree-tos --no-eff-email -d example.com --force-renewal
 
# https://www.digitalocean.com/community/tutorials/how-to-secure-a-containerized-node-js-application-with-nginx-let-s-encrypt-and-docker-compose

networks:
  api-mongo:
  rabbit-queue:
  api-rabbit:
  app-network:

  
